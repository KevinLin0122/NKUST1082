// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using YC.ConsoleApp.Models;
//
//    var riverStageObservatoryProfile = RiverStageObservatoryProfile.FromJson(jsonString);

namespace YC.ConsoleApp.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Stations
    {
        [JsonProperty("RiverStageObservatoryProfile_OPENDATA")]
        public List<StationInfo> StationInfo { get; set; }
    }

    public partial class StationInfo
    {
        [JsonProperty("AlertLevel1")]
        public string AlertLevel1 { get; set; }

        [JsonProperty("AlertLevel2")]
        public string AlertLevel2 { get; set; }

        [JsonProperty("AlertLevel3")]
        public string AlertLevel3 { get; set; }

        [JsonProperty("BasinIdentifier")]
        public string BasinIdentifier { get; set; }

        [JsonProperty("EnglishAddress")]
        public string EnglishAddress { get; set; }

        [JsonProperty("EnglishName")]
        public string EnglishName { get; set; }

        [JsonProperty("EnglishRiverName")]
        public string EnglishRiverName { get; set; }

        [JsonProperty("LocationAddress")]
        public string LocationAddress { get; set; }

        [JsonProperty("LocationByTWD67_XY")]
        public string LocationByTwd67Xy { get; set; }

        [JsonProperty("LocationByTWD97_XY")]
        public string LocationByTwd97Xy { get; set; }

        [JsonProperty("ObservatoryName")]
        public string ObservatoryName { get; set; }

        [JsonProperty("RiverName")]
        public string RiverName { get; set; }
    }

    public partial class Stations
    {
        public static Stations FromJson(string json) => JsonConvert.DeserializeObject<Stations>(json, YC.ConsoleApp.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Stations self) => JsonConvert.SerializeObject(self, YC.ConsoleApp.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
